*CompetiTest.Vim* Competitive Programming with Vim Made Easy

A refactoring of https://github.com/xeluxee/competitest.nvim in vim9script.

*competitest.vim* is a testcase manager and checker. It saves you time in
competitive programming contests by automating common tasks related to testcase
management. It can compile, run and test your solutions across all the
available testcases, displaying results in a nice interactive user interface.

==============================================================================
FEATURES                                                        *competitest*

- Multiple languages supported: works out of the box with C, C++, Rust, Java
  and Python, but other languages can be configured
- Flexible. No strict file-naming rules, optional fixed folder structure
- Configurable (see |competitest-configuration|). You can even configure every
  folder individually (see |competitest-local-config|)
- Testcases can be stored in a single file or in multiple text files
- Easily add, edit and delete testcases
- Run your program across all testcases, showing results in an interactive UI
- Download testcases, problems and contests automatically from competitive
  programming platforms
- Templates for received problems and contests
- View diff between actual and expected output
- Customizable interface that resizes automatically when window is resized
- Integration with statusline and winbar
- Customizable highlight groups

==============================================================================
INSTALLATION                                            *competitest-install*

NOTE: This plugin requires Vim > 9.1

This plugin follows the standard runtime path structure and can be installed
with various plugin managers:

Plugin Manager          Install Command ~
NeoBundle              NeoBundle 'mao-yining/competitest.vim'
Vundle                 Plugin 'mao-yining/competitest.vim'
Plug                   Plug 'mao-yining/competitest.vim'
Dein                   call dein#add('mao-yining/competitest.vim')
minpac                 call minpac#add('mao-yining/competitest.vim')
Native package         git clone https://github.com/mao-yining/competitest.vim
                       ~/.vim/pack/dist/start/competitest.vim
                       Remember to run :helptags to generate help tags
Manual                 Copy all files to your ~/.vim directory

==============================================================================
USAGE                                                        *competitest-use*

USAGE NOTES ~

- Programs must read from stdin and print to stdout
- A testcase consists of an input and output (correct answer)
- Input is required, output is optional

STORING TESTCASES ~

- Default naming: task-A.cpp -> task-A_input0.txt, task-A_output0.txt, etc.
- Counting starts from 0
- Customize naming with testcases_input_file_format and testcases_output_file_format
- Testcases can be in same folder as source or configured path

COMMANDS ~

Make sure focused buffer contains the source code file.

:CompetiTest add_testcase                 Add new testcase
:CompetiTest edit_testcase [x]            Edit testcase (optionally specify number)
:CompetiTest delete_testcase [x]          Remove testcase (optionally specify number)
:CompetiTest run                          Run all testcases
:CompetiTest run_no_compile               Run without recompiling
:CompetiTest show_ui                      Show UI without re-running

TESTCASE EDITOR CONTROLS ~
<C-h>, <C-l>, <C-i>       Switch between input/output windows
<C-s>, :wq                Save and close

TESTCASE RUNNER CONTROLS ~
r                         Run testcase again
R                         Run all testcases again
x                         Kill testcase process
X                         Kill all processes
i/I                       View input
a/A                       View answer
o/O                       View stdout
e/E                       View stderr
d/D                       Toggle diff view
q/Q                       Close UI

==============================================================================
RECEIVING TESTCASES                                *competitest-receive*

NOTE: Requires competitive-companion browser extension

:CompetiTest receive testcases      Receive testcases once
:CompetiTest receive problem        Receive problem once (creates source file)
:CompetiTest receive contest        Receive entire contest once
:CompetiTest receive status         Show current receive status
:CompetiTest receive stop           Stop receiving

After command, click green plus button in browser.

CUSTOM FOLDER STRUCTURE ~

Examples:
>
  received_problems_path = "$(HOME)/Competitive Programming/$(JUDGE)/$(CONTEST)/$(PROBLEM).$(FEXT)"
  received_contests_directory = "$(HOME)/Competitive Programming/$(JUDGE)/$(CONTEST)"
  received_contests_problems_path = "$(PROBLEM)/main.$(FEXT)"
<

TEMPLATES ~

Enable with template_file option. Example C++ template:
>
  // Problem: $(PROBLEM)
  // Contest: $(CONTEST)
  // Judge: $(JUDGE)
  // URL: $(URL)
  // Memory Limit: $(MEMLIM)
  // Time Limit: $(TIMELIM)
  // Start: $(DATE)

  #include <iostream>
  using namespace std;
  int main() {
      cout << "This is a template file" << endl;
      cerr << "Problem name is $(PROBLEM)" << endl;
      return 0;
  }
<

==============================================================================
CONFIGURATION                                    *competitest-configuration*

See |competitest-default-config| for full default configuration.

LOCAL CONFIGURATION                              *competitest-local-config*

Create .competitest.vim in folder to override settings. Example:
>
  {
      template_file: "D:/Competitive-Programming/Codeforces/template.$(FEXT)",
      output_compare_method: (output: string, ans: string) => tolower(output) == tolower(ans),
  }
<

MODIFIERS                                        *competitest-modifiers*

FILE-FORMAT MODIFIERS ~
$(HOME)     User home directory
$(FNAME)    File name
$(FNOEXT)   File name without extension
$(FEXT)     File extension
$(FABSPATH) Absolute path of current file
$(ABSDIR)   Absolute path of containing folder
$(TCNUM)    Testcase number

RECEIVE MODIFIERS ~
$(CWD)      Current working directory
$(PROBLEM)  Problem name
$(JUDGE)    Judge name
$(CONTEST)  Contest name
$(URL)      Problem URL
$(MEMLIM)   Memory limit
$(TIMELIM)  Time limit
$(DATE)     Current date/time

==============================================================================
DEFAULT CONFIGURATION                        *competitest-default-config*

Full default configuration:
>
  const default_config = {
    local_config_file_name: ".competitest.vim",
    floating_border: "rounded",
    floating_border_highlight: "FloatBorder",
    editor_ui: {
      normal_mode_mappings: {
        switch_window: ["<C-h>", "<C-l>", "<C-i>"],
        save_and_close: "<C-s>",
        cancel: ["q", "Q"],
      },
    },
    runner_ui: {
      mappings: {
        run_again: "r",
        run_all_again: "R",
        kill: "x",
        kill_all: "X",
        view_input: [ "i", "I" ],
        view_output: [ "a", "A" ],
        view_stdout: [ "o", "O" ],
        view_stderr: [ "e", "E" ],
        toggle_diff: [ "d", "D" ],
        close: [ "q", "Q" ],
      },
      open_when_compilation_fails: true,
    },
    save_current_file: true,
    save_all_files: false,
    compile_directory: ".",
    compile_command: {
      c: { exec: "gcc", args: ["-Wall", "$(FNAME)", "-o", "$(FNOEXT)"] },
      cpp: { exec: "g++", args: ["-Wall", "$(FNAME)", "-o", "$(FNOEXT)"] },
      rust: { exec: "rustc", args: ["$(FNAME)"] },
      java: { exec: "javac", args: ["$(FNAME)"] },
    },
    running_directory: ".",
    run_command: {
      c: { exec: "./$(FNOEXT)" },
      cpp: { exec: "./$(FNOEXT)" },
      rust: { exec: "./$(FNOEXT)" },
      python: { exec: "python", args: ["$(FNAME)"] },
      java: { exec: "java", args: ["$(FNOEXT)"] },
    },
    multiple_testing: -1,
    maximum_time: 5000,
    output_compare_method: "squish",
    view_output_diff: false,
    testcases_auto_detect_storage: true,
    testcases_input_file_format: "$(FNOEXT)$(TCNUM).in",
    testcases_output_file_format: "$(FNOEXT)$(TCNUM).ans",
    testcases_directory: ".",
    companion_port: 27121,
    receive_print_message: true,
    template_file: false,
    evaluate_template_modifiers: true,
    date_format: "%c",
    received_files_extension: "cpp",
    received_problems_path: "$(CWD)/$(PROBLEM).$(FEXT)",
    received_problems_prompt_path: true,
    received_contests_directory: "$(CWD)",
    received_contests_problems_path: "$(PROBLEM).$(FEXT)",
    received_contests_prompt_directory: true,
    received_contests_prompt_extension: true,
    open_received_problems: true,
    open_received_contests: true,
    replace_received_testcases: false,
  }
<

==============================================================================
INTEGRATION                                        *competitest-integration*

STATUSLINE ~
UI windows have special filetypes:
competitest_testcases, competitest_out, competitest_in, competitest_err, competitest_ans

For vim-airline:
>
  if !exists("g:airline_filetype_overrides")
    g:airline_filetype_overrides = {}
  endif
  g:airline_filetype_overrides.competitest_in = [ 'Input', '' ]
  g:airline_filetype_overrides.competitest_out = [ 'Output', '' ]
  g:airline_filetype_overrides.competitest_ans = [ 'Answer', '' ]
  g:airline_filetype_overrides.competitest_err = [ 'Errors', '' ]
  g:airline_filetype_overrides.competitest_testcases = [ 'Testcases', '' ]
<

HIGHLIGHTS                                        *competitest-highlights*

Default highlight groups:
>
  hi CompetiTestRunning cterm=bold     gui=bold
  hi CompetiTestDone    cterm=none     gui=none
  hi CompetiTestCorrect ctermfg=green  guifg=#00ff00
  hi CompetiTestWarning ctermfg=yellow guifg=orange
  hi CompetiTestWrong   ctermfg=red    guifg=#ff0000
<

==============================================================================
CONTRIBUTING                                    *competitest-contributing*

Suggestions and bug reports welcome via issues.
Pull Requests welcome!

==============================================================================
MAINTAINERS                                      *competitest-maintainers*

Mao-Yining <mao.yining@outlook.com>

==============================================================================
LICENSE                                              *competitest-license*

GNU General Public License version 3 (GPL v3) or later

Copyright © 2025 Mao-Yining <mao.yining@outlook.com>

 vim:tw=78:ts=8:ft=help:norl:
